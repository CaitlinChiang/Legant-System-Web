type Package {
  _id: ID
  collection: String
  description: String
  discount: Float
  imageUrl: String
  items: [PackageItem]
  name: String
  quantity: Int
  showPublic: Boolean
  stockQuantity: Int
  totalPrice: Float
}

type PackageItem {
  product: Product
  productId: ID
  quantity: Int
  totalPrice: Float
}
input PackageItemInput {
  productId: ID!
  quantity: Int!
  totalPrice: Float!
}

extend type Query {
  get_package(_id: ID!): Package

  get_packages(
    collections: [String]
    dateRange: DateRangeInput
    discount: Boolean
    paginateData: PaginateDataInput
    showPublic: Boolean
    stockQuantity: StockQuantityInput
  ): [Package]

  get_packages_count(
    collections: [String]
    dateRange: DateRangeInput
    discount: Boolean
    paginateData: PaginateDataInput
    showPublic: Boolean
    stockQuantity: StockQuantityInput
  ): Int
}

extend type Mutation {
  create_package(collection: String!, description: String!, discount: Float, image: Upload!, items: [PackageItemInput]!, name: String!, showPublic: Boolean!, stockQuantity: Int!): Void

  update_package(_id: ID!, collection: String!, description: String!, discount: Float, image: Upload!, imageUrl: String!, name: String!, showPublic: Boolean!, stockQuantity: Int!): Package

  delete_package(_id: ID!, imageUrl: String!): Void

  add_package_item(item: PackageItemInput!): Void

  remove_package_item(productId: ID!): Package
}
